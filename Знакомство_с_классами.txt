--------общие сведения о классах в Java------------
1. В классе определены данные и код, который выполняет действия над этими данными
2. Объект - экземпляр класса.
3. Методы и переменные, составляющие класс - члены класса или переменные экземпляра.
4. ОБЩАЯ ФОРМА ОПРЕДЕЛЕНИЯ КЛАССА:
class имя_класса {
// объявление переменных экземпляра
тип переменная1;
тип переменная2;
// ...
тип переменнаяN;
// объявление методов
тип метод1 (параметры)
// тело метода
тип метод2(параметры)
// тело метода
// ...
тип методN(параметры)
// тело метода
5. Правильно сконструированный класс должен определять одну и только одну логическую сущность
6. Метод main надо указывать в классе лишь в том случае, если выполнение программы начинается с данного класса.
7. ---определение класса, инкапсулирующего информацию о легковых автомобилях, грузовиках и фургонах---
   class Vehicle {
   int passengers; // количество пассажиров
   int fuelcap; // емкость топливного бака
   int mpg; // потребление топлива в милях на галлон
   }
//объявление класса создает новый тип данных Vehicle
8. Объявление класса - это всего лишь описание типа данных, и реальный объект при этом не создается.
9. Создание нового экземпляра класса
Vehicle minivan = new Vehicle(); // создали объект minivan типа Vehicle, являющийся экземпляром класса Vehicle
10.Точечная нотация. После имени объекта указывается имя члена класса, отделяется от него точкой
Объект.имя_члена; // имена членов класса (переменных, методов)
minivan.fulcap = 16;  //означает, что переменной fulcap в экземпляре minivan класса Vehicle присвоено значение 16
11. Компилируемый файл необходимо называть также, как и класс, в котором расположен метод main
12. В одном файле можно создавать несколько экземпляров одного класса, при этом они будут иметь ссылки на разные объекты
Vehicle minivan = new Vehicle();
Vehicle sportcar = new Vehicle();

minivan.a = 5;
minivan.b = 6;
minivan.c = 7;

sportcar.a = 8;
sportcar.b = 9;
sportcar.c = 10;

13. new Vehicle() - физическая копия объекта, ссылка на которую присваивается переменной
minivan типа Vehicle. То есть память для объектов всех классов в Java выделяется динамически в момент
объявления экземпляра класса (new) и ссылка присваивается переменной класса.
Vehicle minivan; // объявить ссылку на объект
minivan = new Vehicle(); // выделить память для объекта типа Vehicle
14. Переменные ссылочного типа:
Vehicle car1 = new Vehicle();
Vehicle car2 = car1;
Vehicle саrЗ = new Vehicle();
car2 = саrЗ; // теперь переменные car2 и саrЗ
// ссылаются на один и тот же объек
15.--------описание методов---------------
15.1 Методы представляют собой подпрограммы, которые манипулируют данными, определенными
в классе, а во многих случаях они предоставляют доступ к этим данным
15.2 В качетсве названий методов нельзя исвпользовать ключевые зарезервированные слова и слово main
15.3
возращаемый_тип имя_метода(список_параметров) {
// тело метода
}
15.4
тип метода, не возвращающий значение обозначается void
cписок_параметров   -  последовательность разделенных запятыми параметров с указанием их имен и типов
15.6
при обращении к переменным класса внутри метода не надо использовать точечную нотацию, а обращаться к переменным напрямую.
15.7 ----возврат из метода----
для методов типа void операция return обозначает немедленное завершение работы метода
и возвращение к вызывающей части программы.
void myMeth() {
    int i;
    for (i=O; i<lO; i++) {
        if(i == 5) return; // завершить цикл на значении 5
        System.out.println();
        }
    }
допускается несколько операторов return для разных ветвей выполнения
-----методы, возвращаемые значение------
return значение;

// Возврат дальности поездки.
int range () {
    return mpg * fuelсар;
}
int result = minivan.range();  // переменной result присваивается результат метода range, примененный к объекту
                               // экземпляру minivan класса Vehicle
15.8 Использование параметров
Значение, передаваемое методу, называется аргументом, тогда как переменная, получающая аргумент, называется формальным
параметром, или просто параметром

class ChkNum {
    // вернуть логическое значение true, если х содержит четное число
    boolean isEven(int х) {
        if((x%2) == О) return true;
        else return false;
        }
    }

    class ParmDemo {
        public static void main(String args[]) {
            ChkNum е = new ChkNum();
            if(e.isEven(1O)) System.out.println("1O - четное число");
            if(e.isEven(9)) System.out.println("9 - четное число");
            if(e.isEven(8)) System.out.println("8 - четное число");
            }
    }

15.9 Параметры в методе могут быть разных типов

int myMeth(int а, double b, float с) {
15.10 Класс инкапсулирует в себе функциональные возможности
15.11






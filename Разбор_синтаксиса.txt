-------разбор синтаксиса из книги Шилдт-Герберт-Java-8-руководство-для-начинающих-примеры-6-е-издание-2015--------
-----------Глава 1-----------
/*----
------
*/ ---------многосторочные комментарии
1.   Class Example {   // новый класс с именем Example
  // члены класса
}
2. public static void main (String args []) { //с метода main начинается выполнение любой программ
public - модификатор доступа, позволяет обращаться к членам класса за пределами класса, напротив - private
static - допускает вызов метода main до создания объекта класса
void - означает, что метод main ничего не возвращает
String args [] - указывает,что методу main передаются в качестве параметров аргументы, прописываемы в командной строке
при запуске программы
3. System.out.println("Java правит интернетом!");
System - предопределенный класс, предоставляющий доступ к системным ресурсам
out - поток вывода на консоль
println - метод, позволяющий выводитьв консоль данные определенного типа, указанные в скобках
4. Каждый оператор завершается ";"
5. Java регистрозависимый язык
6. Работа с переменными, типы данных
int var1; // объявление переменной   // тип   имя_переменной = значение;
int var1, var2;  // объявление сразу нескольких переменных, обе переменные объявляются в одном операторе
float var3;  // числа с плавающей точкой с одним знаком точности
double var3;  // числа с плавающей точкой с двумя знаками точности
var1 = 1024; // присваивание значения переменной
7. System.out.println  //метод вывода в консоль с переносом на новую строку
System.out.print  // метод вывода в консоль без переноса на новую строку
System.out.println(); // вывод в консоль пустой строки
8. Условные операторы
if условие действие_если_условие_истинно
if 10>9 System.out.println("10 больше 9"); // условие истинно (True) - действие выполнится
if 10<9 System.out.println("строка не отобразится"); // условие ложно (False) - действие не выполнится
Полный набор операций сравнения: >,<,<=,>=,!=,==
9. Циклы.
fоr(инициализация; условие; итерация) оператор;
итерация - порядок изменения переменной цикла на каждой итерации
инициализация - инициализация переменной цикла
условие - пока условие цикла истинно цикл продолжает выполняться
count++; // операция инкремента (увеличивает значение на 1)
count--; // операция декремента (уменьшает значение на 1)
10. Зарезервированные слова в Java
abstract assert boolean break byte case
catch char class const continue default
do double else enum extends final
finally float for goto if implements
import instanceof int interface long native
new package private protected puЫic return
short static strictfp super switch synchronized
this throw throws transient try void
volatile while

----------------Глава 2. Введение в типы данных и операции над ними----------------------
--------простые (примитивные) типы данных
Тип Описание                                                    Разрядность     Значение
boolean Представляет логические значения true и false
byte 8-разрядное целое число                                        8           -128  до  127
char Символ                                                         16          от 0 до 65536 (беззнаковое)
double Числовое значение с плавающей точкой двойной точности        64
float Числовое значение с плавающей точкой одинарной точности       32
int Целое число                                                     32          ОТ -2, 147,483,648 ДО 2, 147,483,647
long Длинное целое число                                            64          ОТ -9,223,372,036,854,775,808 ДО 9,223,372,036,854,775,807
short Короткое число                                                16          ОТ -32,768 ДО 32,767

в Java используется кодировка Unicode (с значениями от 0 до 65536) вместо кодировки ASCII с значениями от 0 до 127

char ch;
ch = 'X';  // обязательно в одинарных кавычках
над символьными значениями можно проводить арифметические операции

-----переменные типа boolean (логический тип)-------------
принимает либо true либо false
boolean b = true;
if b System.out.println("данная инструкция выполняется");
b = false;
if b System.out.println("данная инструкция не выполняется");
System.out.println("результат выполнения выражения 10>9 равен " + (10>9));
// результат выполнения выражения 10>9 равен true

--------литералы---------
литералы применяются для представления постоянных значений в форме,
удобной для восприятия. Литералы часто называют константами.
100, -10  целочисленный литерал
12.53 литерал типа double (эквивалент 12.53D)
13.36F литерал типа float
переменной типа long можно присваивать любые целочисленные литералы
шестнадцатиричные литералы записываются с использованием цифр от 0 до 9 и букв от A до F, число 10 соотв. числу 16 в
десятиричной системе
восьмиричные литералы записываются с использованием цифр от 0 до 7, число 10 равно 8 в десятиричной системе
hex = OxFF; // соответствует десятичному числу 255
oct = 011; // соответствует десятичному числу 9
int var1 = 0b1100   //целочисленный литерал в двоичной форме, в данном случае 12
---------управляющие последовательности-----------
\' - одинарная кавычка
\" - двойная кавычка
\\ - обратный слэш
\r - возврат каретки
\n - перенос строки
\f - Перевод страницы
\t - Горизонтальная табуляция
\Ь - Возврат но одну позицию
\ddd - Восьмеричная константа (rде ddd -восьмеричное число)
\uxxxx - Шестнадцатеричная константа (rде хххх -шестнадцатеричное число)
ch = '\t'; //присваивание переменной ch знака табуляции
ch = '\''; //присваивание переменной ch знака одинарной кавычки
-----------строковые литералы-------------
Символьная строка - это набор символов, заключенный в двойные кавычки:
"privet"
-----------инициализация переменных--------------
int a = 234;
float b = 1.23F;
boolean c = true;
int a = 4, b, c = 5; //инициализация переменных a, c
double volume = 3.1415*radius*radius*height; // динамическая типизация переменной double
----------область видимости переменных------------
1.Переменная объявленная в классе, видна во всех методах.
2. Переменная, объявленная в методе, видна только внутри метода, снаружи нет.
3. Нельзя инициализировать переменную с одним именем два раза, в том числе в разных блоках
------------операции----------------
виды операций:
1. арифметические
2. поразрядные (побитовые)
3. логические
4. операции отношения (сравнения)
1.Арифметические операции:
+ сложение
- вычитание
* умножение
/ деление
% деление по модулю (остаток от деления)
-- декремент
++ инкремент

для целочисленных 10/3 = 3
10 % 3 = 1 (остаток от деления на 3)
инкремент x++   x=x+1   ++x  это одно и тоже выражение, как и при декременте
x = 10;
y = ++x; // в переменную y будет записано 11
---но
x = 10;
y = x++; // в переменную y будет записано 10

-------преобразование типов---------------
1. Неявное(расширяющее) преобразование, допустимо когда выполняются 2 условия:
- оба типа данных совместимы;
- тип к которому приводят более широкий, чем тот, который приводят
byte -> short -> int -> long -> double
int a = 5;
double = a // корректное выражение
2. Явное преобразование типа
(целевой тип)приводимое_выражение
double x,y;
int c = (int)(x/y);

----------управляющие операторы-------------
----ввод данных с клавиатуры---------
осуществляется с помощью конструкции System.in.read(), при этом необходимо осуществить явное приведение к нужному типу
например к типу char
char ch;
ch = (char)System.in.read();
при этом включается конструкция на обработку исключений, защищающая от ошибочного ввода
throws java.io.IOException {
}
----------операторы ветвления--------------
1. Условный оператор if

if (условие) {  // в случае истинности условия выполняется последовательность операторов
последовательность операторов
}
else { // в случае ложности условий выполняется последовательность, указанная после else
последовательность операторов
}
2. Вложенные условия

if(i == 10) {
    if(j < 20) а = Ь;
    if(k > 100) с = d;
    else а = с; // этот оператор else относится
                // к оператору if(k > 100)
    }
else а = d; // а этот оператор else относится
            // к оператору if(i == 10)
-----многоступенчатая констрвукция if - else - if--------
if (условие)   // если не выполняется ни одно из условий, то выполняютя операторы блока else
    оператор;
else if (условие)
    оператор;
else if (условие)
    оператор;
    .
    .
    .
else
    оператор;
-------оператор выбора switch - case---------------
switсh(выражение) {      // оператор сравнивает значение выражение одной из констант, при этом выполняется соответствуюшая
    case константа 1:    // последовательность операторов, оператор break позволяет выйти из конструкции switch-case
        последовательность операторов  // если не указано слова break, то продолжается выполнение последовательности
        break;          // операторов из других блоков case
    case константа 2:
        последовательность операторов
        break;
    case константа 3:
        последовательность операторов
        break;
    default:
        последовательность операторов
    }
// если необходимо выполнить одну и ту же последовательность действий для разных значений констант, то применяют следующую конструкцию

switch(выражение) {
    case константа 1:
    case константа 2:
    case константа 3:
        последовательность операторов
        break;
}
----------------цикл for-------------------
fоr(инициализация; условие; итерация)
{
последовательность операторов;
}

for(int i; i<5; i++) {
    последовательность действий
}
// если переменная цикла инициализирована в цикле, то вне цикла она будет недоступна
// в блоке инициализации можно оперировать с несколькими переменными
for(int i = 0, j = 0; i<10; i++, j--)
// переменную цикла можно инициализировать вне цикла, шаг итерации можно прописать в разделе операций
int i = 0;
(;i<5;){
i++
}
// если не прописать в конструкции цикла условие, то получится бесконечный цикл
for( ; ; )
// цикл без тела
int sum = О;
for(i = 1; i <= 5; sum += i++);
------------цикл с условием while--------------
while (условие) {     // выполняется до тех пор, пока истинно условие
    последовательность действий;
}
-----------цикл с постусловием do while---------------
do {            // тело цикла выполняется хотя бы один раз
блок операций
} while (условие);
--------конструкция break-------------
// позволяет выйти досрочно из тела цикла и продолжить выполнение операций, спланированных после цикла
// если операция break спланирована во вложенном цикле, то она позволяет вернуться в тело вышестоящего цикла
// оператор break, находящийся внутри конструкции switch - case распространяется только на эту конструкцию, но не на
цикл, окружающий его
--------конструкция continue----------
С помощью оператора continue можно организовать досрочное завершение шага
итерации цикла в обход обычной структуры управления циклом. Оператор continue
осуществляет принудительный переход к следующему шагу цикла, пропуская
оставшийся не выполненныи код
---------------массивы----------------
Массив представляет собой совокупность однотипных переменных с общим именем.
--------------одномерные массивы---------------
тип имя_массива [] = new тип[размер]
int[] array = new int[10]; //память для массива выделяеься динамически с помощью оператора new
array[i] // обращение к элементам массива осуществляется по индексам
// по умолчанию массив заполняется нулями
// можно заполнить массив на этапе его инициализации
int[] array = {5, 6, -8, 9};
//Array index Out Of Bounds Exception - частая ошибка, возникающая при выходе за пределы массива (попытке обратиться
к несуществующему элементу массива
--------------многомерные массивы----------------

















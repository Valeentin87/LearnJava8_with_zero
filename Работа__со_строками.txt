--------------класс String---------------
1. Объекты класса String неизменяемы (имутабельны)
Классы StringBuffer, StringBuilder допускают изменение в строке
2. Инициализация строки
String str = "Кот звучит гордо, а если натсупать на хвост ещё и громко";
3. Создание массива строк
String[] cats = {"Васька", "Мурзик", "Барсик"};
4.Создание пустого объекта типа String
String str1 = new String();
5.Создание строки через массив символов.
char[] chars = {'H', 'e', 'l', 'l', 'o'};
String str2 = new String(chars);
6.Можно задать диапазон символьного массива для создания строки
String str3 = new String(chars,0,3);
// Hel //вторая граница диапазона не включается
7. Можно создать объект класса String из объектов класса StringBuffer и StringBuilder
String(StringBuffer объект_StrBuf)
String(StringBuilder объект_StrBuild)
8. Конкатенация строк (сложение)
В том случае, если складываются переменные типов, отличных от int, то они автоматически динамически приводятся к типу стринг
9. Все методы класса String не оперируют на исходных строках, а возвращают результатом новую строку с уже реализованным на
старой строке методом
String s = "Hello";
s.toUpperCase();
System.out.println(s) //результатом будет также слово Hello
s = s.toUpperCase();
System.out.println(s); // теперь результатом будет HELLO, так как s ьеперь ссылается не на Hello а на строку, полученную
в резулььтате метода s.toUpperCase();
10. ----Объекты класса StringBuilder----используются тогда, когда приходится делать многократно конкатенацию, что сопровождается
замеделением программы, выделением лишней памяти и созданием лишних строковых объектов
Находятся в пакете java.lang и не требуют импортирование в код программы
Являются мутабельными(изменяемыми), в отличие от объектов класса String
StringBuilder sb = new StringBuilder("Hello"); //создали экземпляр класса StringBuilder и прописали в его конструктор
                                               //значение, по умолчанию оно было бы равно null
System.out.println(sb.toString()); //превращает объект типа StringBuilder в строку и позволяет вывести в консоль
sb.append(" my"); //позволяет дописать в объект значение и сохранить в нём же
sb.append(" friend");
sb.append(" my").append(" my friend"); // эквивалент двум предыдущим строчкам
System.out.println(sb.toString());
11. char symbol = str4.charAt(0); //возвращает символ по указанному номеру из строки
12. int unicode_number = str4.codePointAt(1);//возвращает порядковый номер в таблице Unicode
13. String s1 = new String("Java");
    String s2 = "JAVA";
    int result = s1.compareTo(s2); //сравнивает две строки и возвращает 0 если они одинаковые, либо возвращает
                                   // разницу в символах в виде целого числа, при сравнении учитывается регистр букв
14. int result1 = s1.compareToIgnoreCase(s2);// сравнивает две строки независимо от регистров букв
15. String result2 = s1.concat(s2); // конкатенация строк, эквивалент s1 + s2
    System.out.println(result2);
16. boolean result3 = s1.equals(s2); //выдает результат сравнения строки с другим объектом (булевое)
    System.out.println(result3);
17. boolean result4 = s1.equalsIgnoreCase(s2); // сравгивает строку с другим объектом без учёта регистра
18. System.out.println(s1.hashCode()); //возвращает хэшкод строки
19. System.out.println(s1.indexOf(65)); //принимает значение в кодировке unicode символа и если он есть в строке то
                                        // то выдает номер индекса, по которому он находится
20. System.out.println(s1.isEmpty()); // если длина строки равна нулю то выдает true, если нет то false
21. int result5 = s1.length(); // возвращает длину строки - количество символов в строке, учитывая пробелы
22. String[] strings = s1.split("v");//разбивает строку на массив строк по определенному разделителю
23. String value3 = "Hello World";
    System.out.println(value3.substring(2,7));//возвращает строку со 2 по 7 не включительно символ
24.char[] chars1 = value3.toCharArray(); //преобразует строку в массив символов
   for (char element:chars1) {
   System.out.println(element);
   }
25.s1 = s1.toUpperCase();//приводит к верхнему регистру
   s2 = s1.toLowerCase();//приводит к нижнему регистру
   String result6 = value3.trim(); // обрезает пробелы в начале и в конце строки
26. String result7 = String.valueOf(65); // приведение к строке целочисленного значения;